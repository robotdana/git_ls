# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/json_schemer/all/json_schemer.rbi
#
# json_schemer-0.2.16

module JSONSchemer
  def self.draft_class(schema); end
  def self.schema(schema, **options); end
end
module JSONSchemer::Format
  def iri_escape(data); end
  def parse_uri_scheme(data); end
  def valid_date_time?(data); end
  def valid_email?(data); end
  def valid_hostname?(data); end
  def valid_ip?(data, type); end
  def valid_json?(data); end
  def valid_json_pointer?(data); end
  def valid_relative_json_pointer?(data); end
  def valid_spec_format?(data, format); end
  def valid_uri?(data); end
  def valid_uri_reference?(data); end
  def valid_uri_template?(data); end
end
module JSONSchemer::Errors
  def self.pretty(error); end
end
class JSONSchemer::CachedRefResolver
  def call(uri); end
  def initialize(&ref_resolver); end
end
module JSONSchemer::Schema
end
class JSONSchemer::Schema::Base
  def child(schema); end
  def custom_format?(format); end
  def ecma_262_regex(pattern); end
  def error(instance, type, details = nil); end
  def format?; end
  def formats; end
  def id_keyword; end
  def ids; end
  def initialize(schema, format: nil, insert_property_defaults: nil, before_property_validation: nil, after_property_validation: nil, formats: nil, keywords: nil, ref_resolver: nil); end
  def join_uri(a, b); end
  def keywords; end
  def pointer_uri(schema, pointer); end
  def ref_resolver; end
  def resolve_ids(schema, ids = nil, parent_uri = nil, pointer = nil); end
  def resolve_ref(uri); end
  def root; end
  def safe_strict_decode64(data); end
  def spec_format?(format); end
  def valid?(data); end
  def valid_instance?(instance); end
  def validate(data); end
  def validate_array(instance, &block); end
  def validate_class(instance, &block); end
  def validate_custom_format(instance, custom_format); end
  def validate_exclusive_maximum(instance, exclusive_maximum, maximum); end
  def validate_exclusive_minimum(instance, exclusive_minimum, minimum); end
  def validate_instance(instance, &block); end
  def validate_integer(instance, &block); end
  def validate_number(instance, &block); end
  def validate_numeric(instance, &block); end
  def validate_object(instance, &block); end
  def validate_ref(instance, ref, &block); end
  def validate_string(instance, &block); end
  def validate_type(instance, type, &block); end
  include JSONSchemer::Format
end
class JSONSchemer::Schema::Base::Instance < Struct
  def after_property_validation; end
  def after_property_validation=(_); end
  def before_property_validation; end
  def before_property_validation=(_); end
  def data; end
  def data=(_); end
  def data_pointer; end
  def data_pointer=(_); end
  def merge(data: nil, data_pointer: nil, schema: nil, schema_pointer: nil, parent_uri: nil, before_property_validation: nil, after_property_validation: nil); end
  def parent_uri; end
  def parent_uri=(_); end
  def schema; end
  def schema=(_); end
  def schema_pointer; end
  def schema_pointer=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class JSONSchemer::Schema::Draft4 < JSONSchemer::Schema::Base
  def id_keyword; end
  def supported_format?(format); end
  def validate_exclusive_maximum(instance, exclusive_maximum, maximum); end
  def validate_exclusive_minimum(instance, exclusive_minimum, minimum); end
  def validate_integer(instance, &block); end
end
class JSONSchemer::Schema::Draft6 < JSONSchemer::Schema::Base
  def supported_format?(format); end
end
class JSONSchemer::Schema::Draft7 < JSONSchemer::Schema::Base
  def supported_format?(format); end
end
class JSONSchemer::UnsupportedMetaSchema < StandardError
end
class JSONSchemer::UnknownRef < StandardError
end
class JSONSchemer::InvalidRefResolution < StandardError
end
class JSONSchemer::InvalidFileURI < StandardError
end
class JSONSchemer::InvalidSymbolKey < StandardError
end
